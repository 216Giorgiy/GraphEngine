<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <ItemGroup>
    <UnitTest Include="**/unittests/**/*_coreclr.csproj" Exclude="**/*exe_coreclr.csproj"/>
    <StressTest Include="**/stresstests/**/*_coreclr.csproj" Exclude="**/*exe_coreclr.csproj"/>
    <Exe Include="**/*exe_coreclr.csproj"/>
    <Bak Include="**/*.csproj.bak" Exclude="**/*coreclr*"/>
  </ItemGroup>

  <PropertyGroup>
    <MetaRunner>$(MSBuildProjectDirectory)/nunit_tools/bin/nunit_meta_runner.dll</MetaRunner>
    <TestRunner>$(MSBuildProjectDirectory)/nunit_tools/bin/nunitlite-runner.dll</TestRunner>
    <UnitTestResultDir>$(MSBuildProjectDirectory)/nunit_unit_coreclr_reports</TestResultDir>
    <StressTestResultDir>$(MSBuildProjectDirectory)/nunit_stress_coreclr_reports</TestResultDir>
  </PropertyGroup>

  <Target Name="Clean">
    <Move SourceFiles="$([System.String]::Copy('%(Bak.Identity)'))" DestinationFiles="$([System.String]::Copy('%(Bak.Identity)').Replace('.csproj.bak', '.csproj'))" />
  </Target>

  <Target Name="Init">
    <Exec
        Command="dotnet restore"
        WorkingDirectory="nunit_tools/nunit_test_runner"
        ContinueOnError="false" />
    <Exec
        Command="dotnet build -c Release --output $(MSBuildProjectDirectory)/nunit_tools/bin"
        WorkingDirectory="nunit_tools/nunit_test_runner"
        ContinueOnError="false" />

    <Exec
        Command="dotnet restore"
        WorkingDirectory="nunit_tools/nunit_meta_runner"
        ContinueOnError="false" />
    <Exec
        Command="dotnet build -c Release --output $(MSBuildProjectDirectory)/nunit_tools/bin"
        WorkingDirectory="nunit_tools/nunit_meta_runner"
        ContinueOnError="false" />
  </Target>

  <Target Name="Build" DependsOnTargets="Init;RunExeTests;RunUnitTests" />

  <Target Name="RunUnitTests" DependsOnTargets="Init">
    <RemoveDir Directories="$(UnitTestResultDir)" ContinueOnError="true" />
    <MakeDir Directories="$(UnitTestResultDir)" ContinueOnError="true" />

    <Exec
        Command="dotnet restore $([System.IO.Path]::GetFileName(%(UnitTest.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(UnitTest.Identity)))"
        ContinueOnError="false"/>
    <Exec
        Command="dotnet build -c Release $([System.IO.Path]::GetFileName(%(UnitTest.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(UnitTest.Identity)))"
        ContinueOnError="true" />
    <Exec
        Command="dotnet $(MetaRunner) -t 1800000 -r $(TestRunner) -d $(UnitTestResultDir) -a bin/Release/netcoreapp2.0/$([System.IO.Path]::GetFileNameWithoutExtension(%(UnitTest.Identity))).dll -o &quot; --workers=1&quot;"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(UnitTest.Identity)))"
        ContinueOnError="true" Condition="Exists('$([System.IO.Path]::GetDirectoryName(%(UnitTest.Identity)))/bin/Release/netcoreapp2.0/$([System.IO.Path]::GetFileNameWithoutExtension(%(UnitTest.Identity))).dll')"/>
  </Target>

  <Target Name="RunStressTests" DependsOnTargets="Init">
    <RemoveDir Directories="$(StressTestResultDir)" ContinueOnError="true" />
    <MakeDir Directories="$(StressTestResultDir)" ContinueOnError="true" />

    <Exec
        Command="dotnet restore $([System.IO.Path]::GetFileName(%(StressTest.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(StressTest.Identity)))"
        ContinueOnError="false"/>
    <Exec
        Command="dotnet build -c Release $([System.IO.Path]::GetFileName(%(StressTest.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(StressTest.Identity)))"
        ContinueOnError="true" />
    <Exec
        Command="dotnet $(MetaRunner) -t 1800000 -r $(TestRunner) -d $(StressTestResultDir) -a bin/Release/netcoreapp2.0/$([System.IO.Path]::GetFileNameWithoutExtension(%(StressTest.Identity))).dll -o &quot; --workers=1&quot;"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(StressTest.Identity)))"
        ContinueOnError="true" Condition="Exists('$([System.IO.Path]::GetDirectoryName(%(StressTest.Identity)))/bin/Release/netcoreapp2.0/$([System.IO.Path]::GetFileNameWithoutExtension(%(StressTest.Identity))).dll')"/>
  </Target>

  <Target Name="RunExeTests">
    <Exec
        Command="dotnet restore $([System.IO.Path]::GetFileName(%(Exe.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(Exe.Identity)))"
        ContinueOnError="false"/>

    <Exec
        Command="dotnet run -p $([System.IO.Path]::GetFileName(%(Exe.Identity)))"
        WorkingDirectory="$([System.IO.Path]::GetDirectoryName(%(Exe.Identity)))"
        ContinueOnError="false" />
  </Target>

</Project>
