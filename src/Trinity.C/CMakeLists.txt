CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
MESSAGE(STATUS "Cmake version ${CMAKE_VERSION}")

INCLUDE_DIRECTORIES(src)
INCLUDE_DIRECTORIES(include)
file(GLOB_RECURSE SRCS src/*.cpp src/*.rc include/*.cpp)

IF(WIN32) 
    MESSAGE(STATUS "Build on Windows")
ENDIF()

IF(UNIX) 
    MESSAGE(STATUS "Build on Unix/Linux") 
    # SET (CMAKE_C_COMPILER             "/usr/bin/clang")
    # SET (CMAKE_C_FLAGS                "-Wall -std=c99")
    # SET (CMAKE_C_FLAGS_DEBUG          "-g")
    # SET (CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
    # SET (CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
    # SET (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

    # SET (CMAKE_CXX_COMPILER "/usr/bin/clang++")
    # SET (CMAKE_CXX_FLAGS_DEBUG "-g")
    # SET (CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG")
    # SET (CMAKE_CXX_FLAGS_RELEASE "-O4 -DNDEBUG")
    # SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
    ADD_DEFINITIONS(-DTRINITYC_EXPORTS -D_CRT_SECURE_NO_WARNINGS -DUNICODE -D_UNICODE)
    # find_package(PkgConfig)
    # pkg_search_module(MONO REQUIRED mono-2)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive -Wall -std=c++14 -Wno-write-strings -Wno-unknown-pragmas -g -pthread")
    LINK_LIBRARIES(crypto;ssl;)
    add_library(Trinity.C STATIC ${SRCS})
ENDIF()

IF(WIN32) 
    ADD_DEFINITIONS(-DWIN32 -DNDEBUG -D_WINDOWS -D_USRDLL -DTRINITYC_EXPORTS -D_CRT_SECURE_NO_WARNINGS -DUNICODE -D_UNICODE)
    SET(COMPILE_DEFINITIONS  "WIN32;NDEBUG;_WINDOWS;_USRDLL;TRINITYC_EXPORTS;_CRT_SECURE_NO_WARNINGS")
    SET(CMAKE_CXX_FLAGS "/volatile:iso /EHa /fp:except- /Zi /Gy /Oi /Ot /Ob2 /MP /Oy /O2 /MT /GS- /W3")
    SET(CMAKE_CXX_FLAGS_RELEASE "/GL")
    SET(CMAKE_SHARED_LINKER_FLAGS "/LTCG /OPT:REF /OPT:ICF /SUBSYSTEM:WINDOWS")
    LINK_LIBRARIES(Psapi.lib;ws2_32.lib;Dbghelp.lib)
    add_library(Trinity.C shared ${SRCS})
ENDIF()

